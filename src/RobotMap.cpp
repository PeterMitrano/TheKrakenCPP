// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainFrontLeft = NULL;
SpeedController* RobotMap::driveTrainFrontRight = NULL;
SpeedController* RobotMap::driveTrainRearLeft = NULL;
SpeedController* RobotMap::driveTrainRearRight = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
Gyro* RobotMap::driveTrainGyro = NULL;
Encoder* RobotMap::driveTrainFrontLeftEncoder = NULL;
Encoder* RobotMap::driveTrainFrontRightEncoder = NULL;
SpeedController* RobotMap::clawMotor = NULL;
DigitalInput* RobotMap::clawLeftClawLimit = NULL;
DigitalInput* RobotMap::clawLightClawLimit = NULL;
Encoder* RobotMap::clawEncoder = NULL;
Encoder* RobotMap::elevatorEncoder = NULL;
SpeedController* RobotMap::elevatorMotor = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
AnalogInput* RobotMap::driveTrainRangeFinder = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveTrainFrontLeft = new Talon(1);
	lw->AddActuator("DriveTrain", "frontLeft", (Talon*) driveTrainFrontLeft);

	driveTrainFrontRight = new Talon(2);
	lw->AddActuator("DriveTrain", "frontRight", (Talon*) driveTrainFrontRight);

	driveTrainRearLeft = new Talon(3);
	lw->AddActuator("DriveTrain", "rearLeft", (Talon*) driveTrainRearLeft);

	driveTrainRearRight = new Talon(4);
	lw->AddActuator("DriveTrain", "rearRight", (Talon*) driveTrainRearRight);

	driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeft,
			driveTrainRearLeft, driveTrainFrontRight, driveTrainRearRight);

	driveTrainRobotDrive->SetSafetyEnabled(true);
	driveTrainRobotDrive->SetExpiration(0.1);
	driveTrainRobotDrive->SetSensitivity(0.5);
	driveTrainRobotDrive->SetMaxOutput(1.0);

	driveTrainGyro = new Gyro(1);
	lw->AddSensor("DriveTrain", "gyro", driveTrainGyro);

	//this method doesn't exist in simulation
#ifdef REAL
	driveTrainGyro->SetSensitivity(0.0015);
#endif

	driveTrainFrontLeftEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("DriveTrain", "frontLeftEncoder", driveTrainFrontLeftEncoder);
	driveTrainFrontLeftEncoder->SetDistancePerPulse(0.00075);
	driveTrainFrontLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
	driveTrainFrontRightEncoder = new Encoder(4, 5, true, Encoder::k4X);
	lw->AddSensor("DriveTrain", "frontRightEncoder",
			driveTrainFrontRightEncoder);
	driveTrainFrontRightEncoder->SetDistancePerPulse(0.00075);
	driveTrainFrontRightEncoder->SetPIDSourceParameter(Encoder::kRate);
	clawMotor = new Talon(5);
	lw->AddActuator("Claw", "motor", (Talon*) clawMotor);

	clawLeftClawLimit = new DigitalInput(8);
	lw->AddSensor("Claw", "leftClawLimit", clawLeftClawLimit);

	clawLightClawLimit = new DigitalInput(9);
	lw->AddSensor("Claw", "rightClawLimit", clawLightClawLimit);

	clawEncoder = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Claw", "encoder", clawEncoder);
	clawEncoder->SetDistancePerPulse(1.0);
	clawEncoder->SetPIDSourceParameter(Encoder::kRate);
	elevatorEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Elevator", "encoder", elevatorEncoder);
	elevatorEncoder->SetDistancePerPulse(1.0);
	elevatorEncoder->SetPIDSourceParameter(Encoder::kDistance);
	elevatorMotor = new Talon(6);
	lw->AddActuator("Elevator", "motor", (Talon*) elevatorMotor);
	driveTrainRangeFinder = new AnalogInput(2);
	lw->AddSensor("Elevator","Range Finder", driveTrainRangeFinder);

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
