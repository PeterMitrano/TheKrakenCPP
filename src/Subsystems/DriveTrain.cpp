// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveTrain.h"
#include "../Commands/DriveWithGamepad.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveTrain::DriveTrain() :
		Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeft = RobotMap::driveTrainFrontLeft;
	frontRight = RobotMap::driveTrainFrontRight;
	rearLeft = RobotMap::driveTrainRearLeft;
	rearRight = RobotMap::driveTrainRearRight;
	robotDrive = RobotMap::driveTrainRobotDrive;
	gyro = RobotMap::driveTrainGyro;
	frontLeftEncoder = RobotMap::driveTrainFrontLeftEncoder;
	frontRightEncoder = RobotMap::driveTrainFrontRightEncoder;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	rangefinder = RobotMap::driveTrainRangeFinder;
}

void DriveTrain::InitDefaultCommand() {
	SetDefaultCommand(new DriveWithGamepad());
}

// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::Stop() {
	robotDrive->StopMotor();
}

void DriveTrain::TankDrive(Joystick* gamepad) {
	robotDrive->TankDrive(gamepad->GetRawAxis(1), gamepad->GetRawAxis(3));
}

void DriveTrain::Drive(double l, double r) {
	robotDrive->TankDrive(-l, -r); // the wheels are reversed
}

double DriveTrain::GetAngle() {
	return gyro->GetAngle();
}

double DriveTrain::GetAverageDistance() {
	return (frontLeftEncoder->GetDistance() + frontRightEncoder->GetDistance())
			/ 2.0;
}

bool DriveTrain::NearTote() {
	return rangefinder->GetVoltage() < 0.2;
}
